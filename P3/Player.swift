
import Foundation

// d√©finition de la classe Player avec une propri√©t√© playerName et son initialiseur, ainsi que les fonctions buildteam(), showTeam(), selectCharacter(), selectOpponent() et selectAlly() :
class Player {
    let playerName: String
    // le tableau qui contient les personnages du joueur :
    var team = [Character]()
    // propri√©t√© calcul√©e qui permet de contr√¥ler gr√¢ce √† une boucle sur tous les personnages de l'√©quipe qu'il y a toujours des personnages vivants pouvant infliger des d√©gats :
    var isADamageDealerAlive: Bool {
        for character in team {
            if character.characterType != "Priest üî±" && character.isAlive {
                return true
            }
        }
        return false
    }
    
    init(playerName: String) {
        self.playerName = playerName
    }
    
    
    // la fonction qui permet de construire son √©quipe :
    func buildTeam() {
        // cr√©ation d'une variable bool√©enne qui permet de boucler sur le choix utilisateur, pour que le menu des choix s'affiche tant que l'utilisateur n'a pas entr√© de choix valide :
        var isValidChoice = false
        while !isValidChoice {
            print(" "
                    + "\n\(playerName), choose a character :"
                    + "\n1. Hunter üèπ"
                    + "\n2. Warrior ü™ì"
                    + "\n3. Magus üîÆ"
                    + "\n4. Priest üî±")
            // on r√©cup√®re le choix utilisateur :
            if let choice = readLine() {
                let newTeamMember: Character?
                switch choice {
                    case "1":
                        newTeamMember = Hunter(name: askName())
                        isValidChoice = true
                    case "2":
                        newTeamMember = Warrior(name: askName())
                        isValidChoice = true
                    case "3":
                        newTeamMember = Magus(name: askName())
                        isValidChoice = true
                    case "4":
                        newTeamMember = Priest(name: askName())
                        isValidChoice = true
                    default:
                        // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                        print("Sorry, didn't catch what you meant ! Please try again by typing 1, 2, 3 or 4.")
                        newTeamMember = nil
                }
                if let newCharacter = newTeamMember {
                    team.append(newCharacter)
                    newCharacter.present()
                }
            }
        }
    }
    
    func askName() -> String {
        print("\nGood choice. Now, what will he be named ?")
        while true {
            if let newCharacterName = readLine() {
                if !isNameAlreadyTaken(newName: newCharacterName) {
                    charactersName.append(newCharacterName)
                    print("Welcome \(newCharacterName) !")
                    return newCharacterName
                }
            }
        }
    }
    
    
    // la fonction qui permet d'afficher les personnages de l'√©quipe :
    func showTeam() {
        print("Here is the team :")
        for character in team {
            print("\(character.name), \(character.characterType)")
        }
    }
    // la fonction qui affiche le nom des personnages de l'√©quipe pour s√©lectionner le personnage attaquant dans les phases de combat :
    func selectCharacter() {
        // variable qui contient un index, ce qui va permettre d'afficher un num√©ro devant le choix du joueur pour qu'il puisse faire sa s√©lection parmis les choix propos√©s :
        var index = 0
        print("  "
                + "\n\(playerName), select a character :")
        // boucle for qui va permettre pour chaque personnage d'incr√©menter son index, de v√©rifier s'il est bien vivant, si c'est le cas d'afficher simplement son nom, sinon la mention "DEAD" √† la suite :
        for character in team {
            index += 1
            if character.isAlive == true {
                print("\(index). \(character.name)")
            } else {
                print("\(index). \(character.name) (DEAD ‚ò†Ô∏è)")
            }
        }
    }
    // la fonction qui affiche le nom des personnages et leur type de l'√©quipe adverse pour s√©lectionner l'attaqu√© dans les phases de combat :
    func selectOpponent() {
        var index = 0
        print("  "
                + "\nWho do you want your character to fight ?")
        for character in team {
            index += 1
            if character.isAlive == true {
                print("\(index). \(character.name) (\(character.characterType))")
            } else {
                print("\(index). \(character.name) (\(character.characterType)) (DEAD ‚ò†Ô∏è)")
            }
        }
    }
    
    // la fonction qui affiche le nom des personnages de l'√©quipe et leur type  pour s√©lectionner celui qui re√ßoit les soins du Pr√™tre dans les phases de combat :
    func selectAlly() {
        var index = 0
        print(" "
                + "\nWho do you want your Priest to heal ?")
        for character in team {
            index += 1
            if character.isAlive == true {
                print("\(index). \(character.name) (\(character.characterType))")
            } else {
                print("\(index). \(character.name) (\(character.characterType)) (DEAD ‚ò†Ô∏è)")
            }
        }
    }
}
