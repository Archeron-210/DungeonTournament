import Foundation


// fonction qui permet de contr√¥ler que le nom choisi pour le personnage n'a pas d√©ja √©t√© choisi pour un autre :
func isNameAlreadyTaken(newName: String) -> Bool {
    for name in charactersName {
        if newName == name {
            print("Sorry, this name's already taken, please choose another one.")
            return true
        }
    }
    return false
}


// la fonction qui r√©cup√®re la r√©ponse utilisateur, cr√©√© un joueur avec le nom r√©cup√©r√©, puis le stocke dans un tableau myPlayers, et recommence pour un deuxi√®me joueur en v√©rifiant que les noms sont bien diff√©rents :
func playersNames() {
    print("\nPlayer one, please enter your name :")
    if let playerOneName = readLine() {
        let firstPlayer = Player(playerName: playerOneName)
        myPlayers.append(firstPlayer)
    print("\nHi \(playerOneName) !")
    }
    // la boucle qui permet au second joueur de choisir √† nouveau un nom si celui choisi en premier lieux est d√©j√† pris :
    while myPlayers.count < 2 {
        print("\nPlayer two, please enter your name :")
        if let playerTwoName = readLine() {
            if playerTwoName != myPlayers[0].playerName {
            let secondPlayer = Player(playerName: playerTwoName)
            myPlayers.append(secondPlayer)
        print("\nHi \(playerTwoName) !")
            } else {
                // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                print("Sorry, this name is already taken, please choose another one :")
            }
        }
    }
}

// cr√©ation d'une fonction qui permet d'afficher les noms des joueurs contenus dans le tableau myPlayers :
func showPlayers() {
    print("\nIn this game the players are :")
    for player in myPlayers {
    print(player.playerName)
    }
}

// Apparition al√©atoire du coffre bonus qui contient une arme :
func randomChest(character: Character) {
        let randomChestPop = Int.random(in: 0..<100)
        if randomChestPop < 70 {
            print(" "
                + "\n\(character.name) found a chest !")
            // cr√©ation du coffre et √©quipement de l'arme qu'il contient par le personnage qui l'a trouv√© :
            let foundChest = Chest()
            character.weapon = foundChest.openChest(character: character)
            character.presentNewWeapon()
        }
}
// la variable du compteur de tours :
var turnCount = 0

func finalMessage() {
    print("\nCongratulations to the both of you, it was a pretty fair game. Thanks for playing, come back soon ! üëã")
    exit(0)
}

func finalStats(winner: Player, loser: Player) {
    print("\nCongratulations \(winner.playerName), you have won this tournament üèÜ ! Let's take a look at how it went :"
    + "\nNumber of turns : \(turnCount)")
    for character in winner.team {
        character.fightStats()
    }
    winner.totalTeamStats()
    print("/nAs for you, \(loser.playerName) :")
    for character in loser.team {
        character.fightStats()
    }
    loser.totalTeamStats()
}

// cr√©ation de la fonction qui lance le jeu et r√©cup√®re le choix utilisateur :
func startGame() {
    print("Welcome in Dungeon Tournament ‚öîÔ∏è ! It's a two players game where each player will choose a team of 3 characters, and have them fight until there's only one team standing."
    + "\n  "
    + "\nWhat do you want to do ?"
    + "\n1. Start game ‚öîÔ∏è"
    + "\n2. Quit game üö™")
    // on r√©cup√®re le choix utilisateur :
    if let choice = readLine() {
        switch choice {
        case "1":
            print("\n Let's begin ! ü§º‚Äç‚ôÇÔ∏è")
            // on instancie les joueurs en r√©cup√©rant leur nom et on les affiche quand c'est fait :
            playersNames()
            showPlayers()
            print("\n Now, each player will build a three character team.")
            // la boucle qui permet, pour chaque joueur, de cr√©er son √©quipe et de l'afficher une fois compl√®te :
            for player in myPlayers {
                for _ in 1...3 {
                    player.buildTeam()
                }
                print("\n \(player.playerName)'s team is complete !")
                player.showTeam()
            }
            print("\n Ready ? Now let the fights begin ! ‚öîÔ∏è")
            // la variable qui contient le joueur courant :
            var currentPlayer: Player = myPlayers[0]
            // boucle des combats qui permet de les lancer tant que les joueurs ont dans leur √©quipe des personnages toujours en vie autre que des Pr√™tres, et qui change le tour des joueurs, suivant lequel vient de terminer son action :
            while myPlayers[0].isADamageDealerAlive && myPlayers[1].isADamageDealerAlive {
                if currentPlayer.playerName == myPlayers[0].playerName {
                    fightTurn(currentPlayer: myPlayers[0], nextPlayer: myPlayers[1])
                    currentPlayer = myPlayers[1]
                    turnCount += 1
                } else {
                    fightTurn(currentPlayer: myPlayers[1], nextPlayer: myPlayers[0])
                    currentPlayer = myPlayers[0]
                    turnCount += 1 
                }
            }
            print("\nüõé END OF THE FIGHTS, DROP YOUR WEAPONS ! üõé")
            if myPlayers[0].aliveCharacterCount > myPlayers[1].aliveCharacterCount {
                finalStats(winner: myPlayers[0], loser: myPlayers[1])
            } else {
                finalStats(winner: myPlayers[1], loser: myPlayers[0])
            }
            finalMessage()
        case "2":
            print("\n Come back soon ! üëã")
            exit(0)
        default:
            // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
            print("Sorry, didn't catch what you meant ! Please try again by typing 1 or 2.")
        }
    }
}

// fonction des combats qui prends en param√®tre le joueur courant et le joueur suivant, afin de d√©terminer l'attaquant et l'attaqu√©, et qui permet de choisir un personnage dans l'√©quipe pour r√©aliser des actions :
func fightTurn(currentPlayer: Player, nextPlayer: Player) {
    currentPlayer.selectCharacter()
    // la variable de type Bool qui permet de v√©rifier si l'utilisateur a fait un choix valide :
    var isValidChoice = false
    // la boucle qui permet de boucler sur les actions possibles tant que l'utilisateur n'a pas fait de choix valide :
    while !isValidChoice {
        // on r√©cup√®re le choix utilisateur :
        if let choice = readLine() {
            switch choice {
                case "1":
                    CharacterAction(currentPlayer: currentPlayer, nextPlayer: nextPlayer, character: currentPlayer.team[0])
                    isValidChoice = true
                case "2":
                    CharacterAction(currentPlayer: currentPlayer, nextPlayer: nextPlayer, character: currentPlayer.team[1])
                    isValidChoice = true
                case "3":
                    CharacterAction(currentPlayer: currentPlayer, nextPlayer: nextPlayer, character: currentPlayer.team[2])
                    isValidChoice = true
                default:
                    // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                    print("Sorry, didn't catch what you meant ! Please try again by typing 1, 2 or 3.")
            }
        }
    }
}

// fonction qui prend en param√®tre le joueur courant, le joueur suivant, et le personnage du joueur courant, afin de r√©aliser les actions de combat :
func CharacterAction(currentPlayer: Player, nextPlayer: Player, character: Character) {
    // la fonction qui fait apparaitre al√©atoirement le coffre bonus :
    randomChest(character: character)
    // la variable de type Bool qui permet de v√©rifier si l'utilisateur √† fait un choix valide :
    var isValidChoice = false
    // la boucle qui permet de boucler sur les actions possibles tant que l'utilisateur n'a pas fait de choix valide :
    while !isValidChoice {
        // on affiche les actions r√©alisables par le personnage :
        character.characterMenu()
        // on r√©cup√®re le choix utilisateur :
        if let choice = readLine() {
            switch choice {
                case "1":
                    // on boucle √† nouveau sur les actions possibles tant que l'utilisateur n'a pas fait de choix valide :
                    while !isValidChoice {
                        // on v√©rifie le type du peronnage pour adapter ses actions dans les combats, et on remplace de r√©sultat stock√© dans isValidChoice par le resultat renvoy√© par la fonction HealerAction ou DamageDealerAction suivant le cas :
                        if let priest = character as? Priest {
                            isValidChoice = HealerAction(currentPlayer: currentPlayer, priest: priest)
                        } else {
                            isValidChoice = DamageDealerAction(nextPlayer: nextPlayer, character: character)
                        }
                    }
                case "2":
                    // on affiche les infos du personnage :
                    character.fightStats()
                default:
                    // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                    print("Sorry, didn't catch what you meant ! Please try again by typing 1, 2 or 3.")
            }
        }
    }
}

// fonction qui prend en param√®tre le joueur courant et le personnage de type Pr√™tre, qui permet de choisir quel personnage de son √©quipe va recevoir des soins, puis renvoie une valeur de type Bool :
func HealerAction(currentPlayer: Player, priest: Priest) -> Bool {
    // on affiche les personnages de l'√©quipe du Pr√™tre :
    currentPlayer.selectAlly()
    // on r√©cup√®re le choix utilisateur :
    if let choice = readLine() {
        // on cr√©√© une constante ally qui va stocker le personnage √† soigner choisi par l'utilisateur :
        let ally: Character
        switch choice {
        // on attribue √† ally la valeur correspondante au personnage soign√© dans chaque cas :
            case "1":
                ally = currentPlayer.team[0]
            case "2":
                ally = currentPlayer.team[1]
            case "3":
                ally = currentPlayer.team[2]
            default:
                // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                print("Sorry, didn't catch what you meant ! Please try again by typing 1, 2 or 3.")
                return false
        }
        // on v√©rifie que le personnage √† soigner est bien en vie, puis on le soigne :
        if ally.isAlive == true {
            print(priest.attack(otherCharacter: ally))
            return true
        } else {
            // le message d'erreur si le personnage √† soigner choisi est mort, et le renvoie de false pour reprendre la s√©lection :
          print("Sorry, this ally is dead, try again by choosing another ally.")
            return false
        }
    }
    return false
}
// fonction qui prend en param√®tre le joueur attaqu√© et le personnage du joueur attaquant, qui permet de choisir quel personnage du joueur attaqu√© va subir l'action du personnage attaquant, et renvoie une valeur de type Bool  :
func DamageDealerAction(nextPlayer: Player, character: Character) -> Bool {
    // on v√©rifie bien que le type du peronnage n'est pas Pr√™tre :
    if character is Priest {
        return false
    }
    // on affiche les personnages du joueur attaqu√© :
    nextPlayer.selectOpponent()
    // on r√©cup√®re le choix utilisateur :
    if let choice = readLine() {
        // on cr√©√© une constante opponent qui va stocker le personnage attaqu√© choisi par l'utilisateur :
        let opponent: Character
        switch choice {
            case "1":
                // on attribue √† opponent la valeur correspondante au personnage attaqu√© dans chaque cas :
                opponent = nextPlayer.team[0]
            case "2":
                opponent = nextPlayer.team[1]
            case "3":
                opponent = nextPlayer.team[2]
            default:
                // on affiche un message d'erreur si le joueur a entr√© une r√©ponse invalide :
                print("Sorry, didn't catch what you meant ! Please try again by typing 1, 2 or 3.")
                // on renvoie le choix comme √©tant invalide pour reprendre la s√©lection :
                return false
        }
        // on v√©rifie que le personnage attaqu√© est bien en vie, puis on l'attaque :
        if opponent.isAlive == true {
            print(character.attack(otherCharacter: opponent))
            return true
        } else {
            // le message d'erreur si l'attaqu√© choisi est mort, et le renvoie de false pour reprendre la s√©lection :
          print("Sorry, this opponent is dead, try again by choosing another opponent.")
            return false
        }
    }
    return false
}
